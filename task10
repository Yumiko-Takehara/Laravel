1. 【超応用】 プロフィールの更新履歴を保存する仕組みを作るにはどのようにしたらよいでしょうか。手順をまとめてみましょう。（どうしてもわからなからない場合はメンターに相談してみましょう。）
2. 【超応用】 1. ができたら実際にプロフィールの更新履歴を保存する仕組みを作成してみましょう。


編集画面でデータを更新するタイミングで histories というテーブルにデータを登録し、編集画面でその一覧を見られるように実装します。


編集履歴テーブルの作成と関連付け

Migrationファイルの雛形を作成します。


$ php artisan make:migration create_profile_histories_table

Created Migration: 2020_07_28_085318_create_profile_histories_table



Migrationファイル(上の場合はdatabase/migrations/2020_07_28_085318_create_profile_histories_table.php)を次のように編集します。



<?php

use Illuminate\Support\Facades\Schema;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Database\Migrations\Migration;

class CreateProfileHistoryTable extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::create('ProfileHistory', function (Blueprint $table) {
            $table->increments('id');
            $table->integer('profile_id');
            $table->string('edited_at');

            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::dropIfExists('profile_histories');
    }
}



Migrationを実行します。


$ php artisan migrate


Modelの雛形を作成します。

$ php artisan make:model ProfileHistory
app/ProfileHistory.php で ProfileHistory Modelを下記のように実装します。


<?php

namespace App;

use Illuminate\Database\Eloquent\Model;

class ProfileHistory extends Model
{
    protected $guarded = array('id');

    public static $rules = array(
        'profile_id' => 'required',
        'edited_at' => 'required',
    );
}



Profile Modelとの関連を定義するために、app/Profile.php へ以下の内容を追記します。


<?php

namespace App;

use Illuminate\Database\Eloquent\Model;

class Profile extends Model
{
    protected $guarded = array('id');

    // 以下を追記
    public static $rules = array(
        'name' => 'required',
        'gender' => 'required',
        'hobby' => 'required',
        'introduction' => 'required',
    );
      // 以下を追記
    // Profileモデルに関連付けを行う
    public function ProfileHistory()
    {
      return $this->hasMany('App\ProfileHistory');

    }
}


Profileモデルに関連付けを定義することで、
Profileモデルから $profile->histories() のような記述で簡単にアクセスすることができます。


編集履歴の記録と参照

ProfileController の update Actionで、Profile Modelを保存するタイミングで、同時に History Modelにも編集履歴を追加するよう実装します。
update Actionを次のように変更。



 public function update(Request $request)
  {
      // Validationをかける
      $this->validate($request, Profile::$rules);
      // Profile Modelからデータを取得する
      $profile = Profile::find($request->id);
      // 送信されてきたフォームデータを格納する
      $profile_form = $request->all();
      if (isset($profile_form['image'])) {
        $path = $request->file('image')->store('public/image');
        $profile->image_path = basename($path);
        unset($profile_form['image']);
      } elseif (isset($request->remove)) {
        $profile->image_path = null;
        unset($profile_form['remove']);
      }
      unset($profile_form['_token']);
      // 該当するデータを上書きして保存する
      $profile->fill($profile_form)->save();
      
      // 以下を追記
        $ProfileHistory = new ProfileHistory;
        $ProfileHistory->profile_id = $profile->id;
        $ProfileHistory->edited_at = Carbon::now();
        $ProfileHistory->save();

      return redirect('admin/profile');
  }



この実装では、時刻を扱うために Carbonという日付操作ライブラリを使います。
Carbonを使って取得した現在時刻を、Historyモデルの edited_at として記録します。
ProfileController.php の冒頭に下記のように追記して下さい。


// 以下を追記

use Carbon\Carbon;


また、Historyモデルの使用を宣言するため、同様に追記して下さい。


use App\Profile;

// 以下を追記

use App\ProfileHistory;

use Carbon\Carbon;



記録した変更履歴を編集画面で参照できるようにします。edit.blade.php を編集してください。



extends('layouts.admin')
@section('title', 'プロフィールの編集')

@section('content')
    <div class="container">
        <div class="row">
            <div class="col-md-8 mx-auto">
                <h2>プロフィール編集</h2>
                <form action="{{ action('Admin\ProfileController@update') }}" method="post" enctype="multipart/form-data">
                    @if (count($errors) > 0)
                        <ul>
                            @foreach($errors->all() as $e)
                                <li>{{ $e }}</li>
                            @endforeach
                        </ul>
                    @endif
                    <div class="form-group row">
                        <label class="col-md-2">名前</label>
                        <div class="col-md-10">
                            <input type="text" class="form-control" name="name" value="{{ $profile_form->name }}">
                        </div>
                    </div>
                    <div class="form-group row">
                        <label class="col-md-2">性別</label>
                        <div class="col-md-10">
                             <input type="text" class="form-control" name="gender" value="{{ $profile_form->gender }}">
                    
                        </div>
                    </div>
                    <div class="form-group row">
                        <label class="col-md-2">趣味</label>
                        <div class="col-md-10">
                            <input type="text" class="form-control" name="hobby" value="{{ $profile_form->hobby }}">
                            <textarea class="form-control" name="hobby" rows="10">{{ old('hobby') }}</textarea>
                        </div>
                    </div>
                     <div class="form-group row">
                        <label class="col-md-2">自己紹介</label>
                        <div class="col-md-10">
                            <input type="text" class="form-control" name="introduction" value="{{ $profile_form->introduction }}">
                            <textarea class="form-control" name="introduction" rows="20">{{ old('introduction') }}</textarea>
                        </div>
                    </div>
                  $profile_form->body }}</textarea>
                        </div>
                    </div>
                     <div class="form-group row">
                        <label class="col-md-2" for="image">画像</label>
                        <div class="col-md-10">
                            <input type="file" class="form-control-file" name="image">
                            <div class="form-text text-info">
                                設定中: {{ $profile_form->image_path }}
                            </div>
                            <div class="form-check">
                                <label class="form-check-label">
                                    <input type="checkbox" class="form-check-input" name="remove" value="true">画像を削除
                                </label>
                            </div>
                        </div>
                    </div>
                    <div class="form-group row">
                        <div class="col-md-10">
                            <input type="hidden" name="id" value="{{ $profile_form->id }}">
                            {{ csrf_field() }}
                            <input type="submit" class="btn btn-primary" value="更新">
                        </div>
                    </div>
                        </div>
                    </div>
                        </div>
                    </div>
                    
                </form>
                {{-- 以下を追記　--}}
                <div class="row mt-5">
                    <div class="col-md-4 mx-auto">
                        <h2>編集履歴</h2>
                        <ul class="list-group">
                            @if ($profile_form->profile_histories != NULL)
                                @foreach ($profile_form->profile_histories as $ProfileHistory)
                                    <li class="list-group-item">{{ $ProfileHistory->edited_at }}</li>
                                @endforeach
                            @endif
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    </div>
@endsection
結果↓


https://gyazo.com/9b7a089b666a9883eb6a69d3d4ffde1a
